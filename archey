#!/usr/bin/env python3
#
# Archey [version 0.3.0]
#
# Archey is a simple system information tool written in Python.
#
# Copyright 2010 Melik Manukyan <melik@archlinux.us>
# Copyright 2010 David Vazgenovich Shakaryan <dvshakaryan@gmail.com>
#
# ASCII art by Brett Bohnenkamper <kittykatt@silverirc.com>
# Changes Jerome Launay <jerome@projet-libre.org>
# Fedora support by YeOK <yeok@henpen.org>
#
# Distributed under the terms of the GNU General Public License v3.
# See http://www.gnu.org/licenses/gpl.txt for the full license text.

# Import libraries

import os, sys, subprocess, argparse, re, time
from subprocess import Popen, PIPE
from argparse import ArgumentParser
from getpass import getuser
from datetime import timedelta

#--------------Arguments--------------#

parser = argparse.ArgumentParser()
parser.add_argument("-a", help="select the ascii art to display")
args = parser.parse_args()


#---------------Output---------------#

output = [ 'User', 'Hostname', 'OS', 'Kernel', 'Uptime', 'WindowManager', 'DesktopEnvironment', 'Shell', 'Terminal', 'Packages', 'CPU', 'RAM', 'Disk' ]

#---------------Dictionaries---------------#

colorDict = {
    'Arch Linux': ['\x1b[0;34m', '\x1b[1;34m'],
    'Antergos': ['\x1b[0;34m', '\x1b[1;34m'],
    'Ubuntu': ['\x1b[0;31m', '\x1b[1;31m', '\x1b[1;33m'],
    'FreeBSD': ['\x1b[0;31m', '\x1b[1;31m', '\x1b[0;33m'],
    'Debian': ['\x1b[0;31m', '\x1b[1;31m'],
    'Raspbian': ['\x1b[0;31m', '\x1b[1;31m'],
    'LinuxMint': ['\x1b[1;37m', '\x1b[1;32m'],
    'CrunchBang': ['\x1b[1;37m','\x1b[1;37m'],
    'Gentoo': ['\x1b[1;35m','\x1b[1;37m'],
    'Fedora': ['\x1b[1;37m', '\x1b[1;34m', '\x1b[0;34m'],
    'openSUSE project': ['\x1b[1;37m', '\x1b[1;32m'],
    'Cygwin': ['\x1b[1;32m', '\x1b[1;30m'],
    'OpenBSD': ['\x1b[1;33m', '\x1b[1;33m', '\x1b[0;33m'],
    'Sensors': ['\x1b[1;31m', '\x1b[1;32m', '\x1b[1;33m'],
    'Clear': ['\x1b[0m']
    }

deDict = {
    'unity-settings-': 'Unity',
    'cinnamon-sessio': 'Cinnamon',
    'gnome-session': 'GNOME',
    'mate-session': 'MATE',
    'ksmserver': 'KDE',
    'xfce4-session': 'Xfce',
    'lxsession': 'LXDE'
    }

wmDict = {
    'awesome': 'Awesome',
    'beryl': 'Beryl',
    'blackbox': 'Blackbox',
    'compiz': 'Compiz',
    'dwm': 'DWM',
    'enlightenment': 'Enlightenment',
    'herbstluftwm': 'herbstluftwm',
    'fluxbox': 'Fluxbox',
    'howm': 'howm',
    'fvwm': 'FVWM',
    'i3': 'i3',
    'icewm': 'IceWM',
    'kwin': 'KWin',
    'metacity': 'Metacity',
    'musca': 'Musca',
    'nemo': 'Nemo',
    'openbox': 'Openbox',
    'pekwm': 'PekWM',
    'ratpoison': 'ratpoison',
    'scrotwm': 'ScrotWM',
    'wmaker': 'Window Maker',
    'wmfs': 'Wmfs',
    'wmii': 'wmii',
    'xfwm4': 'Xfwm',
    'xmonad': 'xmonad'
    }

logosDict = {'Arch Linux': '''{color[1]}
{color[1]}               +                {results[0]}
{color[1]}               #                {results[1]}
{color[1]}              ###               {results[2]}
{color[1]}             #####              {results[3]}
{color[1]}             ######             {results[4]}
{color[1]}            ; #####;            {results[5]}
{color[1]}           +##.#####            {results[6]}
{color[1]}          +##########           {results[7]}
{color[1]}         ######{color[0]}#####{color[1]}##;         {results[8]}
{color[1]}        ###{color[0]}############{color[1]}+        {results[9]}
{color[1]}       #{color[0]}######   #######        {results[10]}
{color[0]}     .######;     ;###;`\".      {results[11]}
{color[0]}    .#######;     ;#####.       {results[12]}
{color[0]}    #########.   .########`
{color[0]}   ######'           '######
{color[0]}  ;####                 ####;
{color[0]}  ##'                     '##
{color[0]} #'                         `#
\x1b[0m'''
,'Antergos': '''{color[1]}
{color[1]}               +                {results[0]}
{color[1]}               #                {results[1]}
{color[1]}              ###               {results[2]}
{color[1]}             #####              {results[3]}
{color[1]}             ######             {results[4]}
{color[1]}            ; #####;            {results[5]}
{color[1]}           +##.#####            {results[6]}
{color[1]}          +##########           {results[7]}
{color[1]}         ######{color[0]}#####{color[1]}##;         {results[8]}
{color[1]}        ###{color[0]}############{color[1]}+        {results[9]}
{color[1]}       #{color[0]}######   #######        {results[10]}
{color[0]}     .######;     ;###;`\".      {results[11]}
{color[0]}    .#######;     ;#####.       {results[12]}
{color[0]}    #########.   .########`
{color[0]}   ######'           '######
{color[0]}  ;####                 ####;
{color[0]}  ##'                     '##
{color[0]} #'                         `#
\x1b[0m'''
,'FreeBSD':'''{color[0]}
{color[0]}  ```                        `    {results[0]}
{color[0]} s` `.....---.......--.```   -/   {results[1]}
{color[0]} +o   .--`         /y:`      +.   {results[2]}
{color[0]}  yo`:.            :o      `+-    {results[3]}
{color[0]}   y/               -/`   -o/     {results[4]}
{color[0]}  .-                  ::/sy+:.    {results[5]}
{color[0]}  /                     `--  /    {results[6]}
{color[0]} `:                          :`   {results[7]}
{color[0]} `:                          :`   {results[8]}
{color[0]}  /                          /    {results[9]}
{color[0]}  .-                        -.    {results[10]}
{color[0]}   --                      -.     {results[11]}
{color[0]}    `:`                  `:`      {results[12]}
{color[0]}      .--             `--.
{color[0]}         .---.....----.
{color[0]}
{color[0]}
{color[0]}
\x1b[0m'''
,'Debian':'''{color[0]}
{color[1]}           _sudZUZ#Z#XZo=_        {results[0]}
{color[1]}        _jmZZ2!!~---~!!X##wx      {results[1]}
{color[1]}     .<wdP~~            -!YZL,    {results[2]}
{color[1]}    .mX2'       _xaaa__     XZ[.  {results[3]}
{color[1]}    oZ[      _jdXY!~?S#wa   ]Xb;  {results[4]}
{color[1]}   _#e'     .]X2(     ~Xw|  )XXc  {results[5]}
{color[1]}  .2Z`      ]X[.       xY|  ]oZ(  {results[6]}
{color[1]}  .2#;      )3k;     _s!~   jXf`  {results[7]}
{color[0]}   1Z>      -]Xb/    ~    __#2(   {results[8]}
{color[0]}   -Zo;       +!4ZwerfgnZZXY'     {results[9]}
{color[0]}    *#[,        ~-?!!!!!!-~       {results[10]}
{color[0]}     XUb;.                        {results[11]}
{color[0]}      )YXL,,                      {results[12]}
{color[0]}        +3#bc,
{color[0]}          -)SSL,,
{color[0]}             ~~~~~
\x1b[0m'''
,'Raspbian':'''{color[0]}
{color[1]}           _sudZUZ#Z#XZo=_        {results[0]}
{color[1]}        _jmZZ2!!~---~!!X##wx      {results[1]}
{color[1]}     .<wdP~~            -!YZL,    {results[2]}
{color[1]}    .mX2'       _xaaa__     XZ[.  {results[3]}
{color[1]}    oZ[      _jdXY!~?S#wa   ]Xb;  {results[4]}
{color[1]}   _#e'     .]X2(     ~Xw|  )XXc  {results[5]}
{color[1]}  .2Z`      ]X[.       xY|  ]oZ(  {results[6]}
{color[1]}  .2#;      )3k;     _s!~   jXf`  {results[7]}
{color[0]}   1Z>      -]Xb/    ~    __#2(   {results[8]}
{color[0]}   -Zo;       +!4ZwerfgnZZXY'     {results[9]}
{color[0]}    *#[,        ~-?!!!!!!-~       {results[10]}
{color[0]}     XUb;.                        {results[11]}
{color[0]}      )YXL,,                      {results[12]}
{color[0]}        +3#bc,
{color[0]}          -)SSL,,
{color[0]}             ~~~~~
\x1b[0m'''
,'Ubuntu':'''{color[0]}
{color[0]}                          .oyhhs:   {results[0]}
{color[1]}                 ..--.., {color[0]}shhhhhh-   {results[1]}
{color[1]}               -+++++++++`:{color[0]}yyhhyo`  {results[2]}
{color[2]}          .--  {color[1]}-++++++++/-.-{color[0]}::-`    {results[3]}
{color[2]}        .::::-   {color[1]}:-----:/+++/++/.   {results[4]}
{color[2]}       -:::::-.          {color[1]}.:++++++:  {results[5]}
{color[1]}  ,,, {color[2]}.:::::-`             {color[1]}.++++++- {results[6]}
{color[1]}./+++/-{color[2]}`-::-                {color[1]}./////: {results[7]}
{color[1]}+++++++ {color[2]}.::-                        {results[8]}
{color[1]}./+++/-`{color[2]}-::-                {color[0]}:yyyyyo {results[9]}
{color[1]}  ``` `{color[2]}-::::-`             {color[0]}:yhhhhh: {results[10]}
{color[2]}       -:::::-.         {color[0]}`-ohhhhhh+  {results[11]}
{color[2]}        .::::-` {color[0]}-o+///+oyhhyyyhy:   {results[12]}
{color[2]}         `.--  {color[0]}/yhhhhhhhy+{color[2]},....
{color[0]}               /hhhhhhhhh{color[2]}-.-:::;
{color[0]}               `.:://::- {color[2]}-:::::;
{color[2]}                         `.-:-'
{color[2]}
\x1b[0m'''
,'LinuxMint':'''{color[0]}
{color[0]} MMMMMMMMMMMMMMMMMMMMMMMMMmds+.      {results[0]}
{color[0]} MMm----::-://////////////oymNMd+`   {results[1]}
{color[0]} MMd      {color[1]}/++                {color[0]}-sNMd:  {results[2]}
{color[0]} MMNso/`  {color[1]}dMM    `.::-. .-::.`{color[0]} .hMN: {results[3]}
{color[0]} ddddMMh  {color[1]}dMM   :hNMNMNhNMNMNh: `{color[0]}NMm {results[4]}
{color[0]}     NMm  {color[1]}dMM  .NMN/-+MMM+-/NMN` {color[0]}dMM {results[5]}
{color[0]}     NMm  {color[1]}dMM  -MMm  `MMM   dMM. {color[0]}dMM {results[6]}
{color[0]}     NMm  {color[1]}dMM  -MMm  `MMM   dMM. {color[0]}dMM {results[7]}
{color[0]}     NMm  {color[1]}dMM  .mmd  `mmm   yMM. {color[0]}dMM {results[8]}
{color[0]}     NMm  {color[1]}dMM`  ..`   ...   ydm. {color[0]}dMM {results[9]}
{color[0]}     hMM-  {color[1]}+MMd/-------...-:sdds {color[0]}MMM {results[10]}
{color[0]}     -NMm-  {color[1]}:hNMNNNmdddddddddy/` {color[0]}dMM {results[11]}
{color[0]}      -dMNs-``{color[1]}-::::-------.``    {color[0]}dMM {results[12]}
{color[0]}       `/dMNmy+/:-------------:/yMMM
{color[0]}          ./ydNMMMMMMMMMMMMMMMMMMMMM
{color[0]}
{color[0]}
{color[0]}
\x1b[0m'''
,'Fedora':'''{color[0]}
{color[2]}           :/------------://        {results[0]}
{color[2]}        :------------------://      {results[1]}
{color[2]}      :-----------{color[0]}/shhdhyo/{color[2]}-://     {results[2]}
{color[2]}    /-----------{color[0]}omMMMNNNMMMd/{color[2]}-:/    {results[3]}
{color[2]}   :-----------{color[0]}sMMMdo:/{color[2]}       -:/   {results[4]}
{color[2]}  :-----------{color[0]}:MMMd{color[2]}-------    --:/  {results[5]}
{color[2]}  /-----------{color[0]}:MMMy{color[2]}-------    ---/  {results[6]}
{color[2]} :------    --{color[0]}/+MMMh/{color[2]}--        ---: {results[7]}
{color[2]} :---     {color[0]}oNMMMMMMMMMNho{color[2]}     -----: {results[8]}
{color[2]} :--      {color[0]}+shhhMMMmhhy++{color[2]}   ------:  {results[9]}
{color[2]} :-      -----{color[0]}:MMMy{color[2]}--------------/  {results[10]}
{color[2]} :-     ------{color[0]}/MMMy{color[2]}-------------:   {results[11]}
{color[2]} :-      ----{color[0]}/hMMM+{color[2]}------------:    {results[12]}
{color[2]} :--{color[0]}:dMMNdhhdNMMNo{color[2]}-----------:
{color[2]} :---{color[0]}:sdNMMMMNds:{color[2]}----------:
{color[2]} :------{color[0]}:://:{color[2]}-----------://
{color[2]} :--------------------://
{color[2]}
\x1b[0m'''
,'CrunchBang':'''{color[0]}
{color[1]}                ___       ___      _  {results[0]}
{color[1]}               /  /      /  /     | | {results[1]}
{color[1]}              /  /      /  /      | | {results[2]}
{color[1]}             /  /      /  /       | | {results[3]}
{color[1]}     _______/  /______/  /______  | | {results[4]}
{color[1]}    /______   _______   _______/  | | {results[5]}
{color[1]}          /  /      /  /          | | {results[6]}
{color[1]}         /  /      /  /           | | {results[7]}
{color[0]}        /  /      /  /            | | {results[8]}
{color[0]} ______/  /______/  /______       | | {results[9]}
{color[0]}/_____   _______   _______/       | | {results[10]}
{color[0]}     /  /      /  /               | | {results[11]}
{color[0]}    /  /      /  /                |_| {results[12]}
{color[0]}   /  /      /  /                  _
{color[0]}  /  /      /  /                  | |
{color[0]} /__/      /__/                   |_|
\x1b[0m'''
,'openSUSE project':'''{color[0]}
{color[1]}        +########_ #=.    {results[0]}
{color[1]}      ################-#  {results[1]}
{color[1]}    =################ -:+ {results[2]}
{color[1]}   ################+# #~# {results[3]}
{color[1]}  ################## ==#= {results[4]}
{color[1]} :##+:################-_# {results[5]}
{color[1]} ## `_  ##########=###=`  {results[6]}
{color[1]} #._###- ##   .##.        {results[7]}
{color[1]} #`#~ `# ##    `#_^       {results[8]}
{color[1]} ## ## #  #     ^#        {results[9]}
{color[1]}  #=  ##                  {results[10]}
{color[1]}   ####                   {results[11]}
{color[1]}                          {results[12]}
{color[1]}
{color[1]}
{color[1]}
\x1b[0m'''
,'Cygwin':'''{color[0]}
{color[1]}     %%%%%%%%%%%%%%%%%       {results[0]}
{color[1]}   ,%%%%%%%%%%%%%%%%%%%      {results[1]}
{color[1]}   :%%%%%%%%%%%%%%%%%%       {results[2]}
{color[1]}   :%%%%%$`                  {results[3]}
{color[1]}   :%%%%%$`  {color[0]}o=`             {results[4]}
{color[1]}   :%%%%%$`  {color[0]}*iooo=`         {results[5]}
{color[1]}   :%%%%%$`  {color[0]}^*o=+=ooo=`     {results[6]}
{color[1]}   :%%%%%$`   {color[0]}^*oiii=+=ooo=` {results[7]}
{color[1]}   :%%%%%$`   {color[0]}i.io*eee*+_.   {results[8]}
{color[1]}   :%%%%%$`  {color[0]}ooee!e+_.       {results[9]}
{color[1]}   :%%%%%$`  {color[0]}ee+_.           {results[10]}
{color[1]}   :%%%%%$`  {color[0]}`               {results[11]}
{color[1]}   :%%%%%$`                  {results[12]}
{color[1]}   :%%%%%%%%%%%%%%%%%%
{color[1]}   `%%%%%%%%%%%%%%%%%%%
{color[1]}     %%%%%%%%%%%%%%%%%
\x1b[0m'''
,'Gentoo':'''{color[0]}
{color[0]}        __q@@@@m             {results[0]}
{color[0]}      _q@@@@@@@@@@_          {results[1]}
{color[0]}     _@@@@@@@@@@@@@@m        {results[2]}
{color[0]}    q@@@@@@@@@@@@@@@@@_      {results[3]}
{color[0]}   _@@@@@@@@@@##@@@@@@@h     {results[4]}
{color[0]}   @@@@@@@@@@@ ##@@@@@@@@_   {results[5]}
{color[0]}   7##@@@@@@@___@@@@@@@@@@,  {results[6]}
{color[0]}     ####@@@@@@@@@@@@@@@@@@  {results[7]}
{color[0]}       ####@@@@@@@@@@@@@@@@  {results[8]}
{color[0]}        q@@@@@@@@@@@@@@@@#W  {results[9]}
{color[0]}       q@@@@@@@@@@@@@@@@@@/  {results[10]}
{color[0]}     _@@@@@@@@@@@@@@@@#@@    {results[11]}
{color[0]}    q@@@@@@@@@@@@@@@#@##^    {results[12]}
{color[0]}   m#@@@@@@@@@@@@@@#@#W     
{color[0]}  _q@@@@@@@@@@@@@#@#*>      
{color[0]}   p@@@@@@@@@@@#@##%        
{color[0]}    _##@@@@@##@#@#g         
{color[0]}      _#@@@@@@#@@           
{color[0]}        _p@@@@q 
\x1b[0m'''                             
,'OpenBSD':'''{color[0]}
{color[0]}               |    .            {results[0]}
{color[0]}           .   |L  /|   .        {results[1]}
{color[0]}       _ . | _| --+._/| .        {results[2]}
{color[0]}      / ||| Y J  )   / |/| ./    {results[3]}
{color[0]}     J  |)'( |        ` F`.'/    {results[4]}
{color[0]}   -<|  F         __     .-<     {results[5]}
{color[0]}     | /       .-'. `.  /-. L___ {results[6]}
{color[0]}     J       <      | | |O.-|.-' {results[7]}
{color[0]}   _J   .-    / O | |   |. ./    {results[8]}
{color[0]}  '-F  -<_.        .-'  `-'-L__  {results[9]}
{color[0]} __J  _   _.     >-'  )._.   |'  {results[10]}
{color[0]} `-|.'   /_.           _|   F    {results[11]}
{color[0]}   /.-   .                _.<    {results[12]}
{color[0]}  /'    /.'             .'  `
{color[0]}   /L  /'   |/      _.-'-
{color[0]}  /'J       ___.---'|
{color[0]}    |  .--' V  | `. `
{color[0]}    |/`. `-.     `._)
{color[0]}       / .-.
{color[0]}        (  `
{color[0]}        `.
\x1b[0m'''
}

dist = ''
if os.path.exists('/bin/freebsd-version'):
    dist = 'FreeBSD'
elif os.path.exists('/bin/cygcheck.exe'):
    dist = 'Cygwin'
elif os.path.exists('/etc/lsb-release'):
    dist = Popen(['lsb_release', '-is'], stdout=PIPE).communicate()[0].decode('Utf-8').rstrip('\n')
elif os.path.exists('/etc/os-release'):
    with open('/etc/os-release','r') as osr:
        for line in osr:
            if re.match('ID=', line):
                dist=line[3:].rstrip('\n').title()
else:
    dist = Popen(['uname', '-s'], stdout=PIPE).communicate()[0].decode('Utf-8').rstrip('\n')


if dist=='Debian' and os.path.exists('/etc/lsb-release-crunchbang'):
    dist='CrunchBang'


if dist == 'FreeBSD' or dist == 'OpenBSD':
    processes = str(subprocess.check_output(('ps', '-U', getuser(), '-o', 'comm=')), encoding='utf8').rstrip('\n').split('\n')
elif dist == 'Cygwin':
    processes = str(subprocess.check_output(('ps', '-u', getuser())), encoding='utf8').rstrip('\n').split('\n')
else:
    processes = str(subprocess.check_output(('ps', '-u', getuser(), '-o', 'comm',
        '--no-headers')), encoding='utf8').rstrip('\n').split('\n')

#---------------Classes---------------#

class Output:
    results = []

    def __init__(self):
        if not args.a:
            self.distro = dist + ' Linux' if dist == 'Arch' else dist
        else:
            self.distro = args.a 

    def append(self, display):
        self.results.append('%s%s: %s%s' % (colorDict[self.distro][1], display.key, colorDict['Clear'][0], display.value))

    def output(self):
        print(logosDict[self.distro].format(color = colorDict[self.distro], results = self.results))

class User:
    def __init__(self):
        self.key = 'User'
        self.value = os.getenv('USER')

class Hostname:
    def __init__(self):
        self.key = 'Hostname'
        self.value = os.uname()[1]

class OS:
    def __init__(self):

        if dist == 'Arch':
            OS =  'Arch Linux'
        elif dist == 'openSUSE project':
            OS = 'openSUSE'
        else:
            OS = dist

        arch = os.uname()[4]
        OS = OS + ' ' + arch

        self.key = 'OS'
        self.value = OS

class Kernel:
    def __init__(self):
        self.key = 'Kernel'
        self.value = os.uname()[0] + ' ' + os.uname()[2]

class Uptime:
    def __init__(self):
        if dist == 'FreeBSD':
            boottime = Popen(['sysctl', '-n',  'kern.boottime'], stdout=PIPE).communicate()[0].decode('Utf-8').rstrip('\n').split()[3]
            currtime = int(time.time())
            fuptime =int(currtime) - int(re.sub(',', '', boottime))
        elif dist == 'OpenBSD':
            boottime = Popen(['sysctl', '-n',  'kern.boottime'], stdout=PIPE).communicate()[0].decode('Utf-8').rstrip('\n')
            currtime = int(time.time())
            fuptime =int(currtime) - int(re.sub(',', '', boottime))
        else:
            fuptime = int(open('/proc/uptime').read().split('.')[0])

        uptime = timedelta(seconds=fuptime)

        self.key = 'Uptime'
        self.value = uptime

class WindowManager:
    def __init__(self):
        wm = ''
        for key in wmDict.keys():
            if key in processes:
                wm = wmDict[key]
                break

        self.key = 'Window Manager'
        self.value = wm

class DesktopEnvironment:
    def __init__(self):
        de = ''
        for key in deDict.keys():
            if key in processes:
                de = deDict[key]
                break

        self.key = 'Desktop Environment'
        self.value = de

class Shell:
    def __init__(self):
        self.key = 'Shell'
        self.value = os.getenv('SHELL')

class Terminal:
    def __init__(self):
        self.key = 'Terminal'
        self.tmux = ' (tmux)' if os.getenv('TMUX') else ''
        self.value = os.getenv('TERM') + self.tmux

class Packages:
    def __init__(self):
        if dist == 'FreeBSD':
            p1 = Popen(['pkg', 'info'], stdout=PIPE).communicate()[0].decode("Utf-8")
        elif dist == 'OpenBSD':
            p1 = Popen(['pkg_info'], stdout=PIPE).communicate()[0].decode("Utf-8")
        elif dist == 'Arch' or dist == 'Antergos':
            p1 = Popen(['pacman', '-Q'], stdout=PIPE).communicate()[0].decode("Utf-8")
        elif dist == 'Gentoo':
            p1 = Popen(['equery', 'list', '*'], stdout=PIPE).communicate()[0].decode("Utf-8")
        elif dist == 'Fedora' or dist == 'openSUSE project':
            p1 = Popen(['rpm', '-qa'], stdout=PIPE).communicate()[0].decode("Utf-8")
        elif dist == 'Ubuntu' or dist == 'Debian' or dist == 'LinuxMint' or dist == 'CrunchBang' or dist == 'Raspbian':
            p0 = Popen(['dpkg', '--get-selections'], stdout=PIPE)
            p1 = Popen(['grep', '-v', 'deinstall'], stdin=p0.stdout, stdout=PIPE).communicate()[0].decode("Utf-8")
        elif dist == 'Cygwin':
            p0 = Popen(['cygcheck', '-cd'], stdout=PIPE)
            p1 = Popen(['sed', '-e', '1,2d'], stdin=p0.stdout, stdout=PIPE).communicate()[0].decode("Utf-8")
        packages = len(p1.rstrip('\n').split('\n'))
        self.key = 'Packages'
        self.value = packages

class CPU:
    def __init__(self):
        if dist == 'FreeBSD' or dist == 'OpenBSD':
            file = Popen(['sysctl', '-n','hw'], stdout=PIPE).communicate()[0].decode('Utf-8').split('\n')
            cpuinfo = re.sub('  +', ' ', file[1].replace('model name\t: ', '').rstrip('\n'))
        else:
            file = Popen(['grep', '-i', 'model name\t: ', '/proc/cpuinfo'], stdout=PIPE).communicate()[0].decode('Utf-8').split('\n')
            cpuinfo = re.sub('  +', ' ', file[0].replace('model name\t: ', ''))
        self.key = 'CPU'
        self.value = cpuinfo

class RAM:
    def __init__(self):
        if dist == 'FreeBSD':
            raminfo = Popen(['vmstat'], stdout=PIPE).communicate()[0].decode('Utf-8').split('\n')
            ram = raminfo[2].split()
            used = int(ram[3])//1024
            total = int(ram[4])//1024
        elif dist == 'OpenBSD':
            p0 = Popen(['top', '-d1'],stdout=PIPE)
            p1 = Popen(['awk', '/Memory/{gsub(/[KMGT]/,""); gsub(/\//, " "); print $3, $4, $8}'], stdin=p0.stdout, stdout=PIPE).communicate()[0].decode("Utf-8").split()
            used = int(p1[0])
            free = int(p1[2])
            total = int(p1[1])+int(p1[2])
        elif dist == 'Cygwin':
            p0 = Popen(['sed', '-e', '1,2!d', '/proc/meminfo'],stdout=PIPE)
            p1 = Popen(['awk', '{print $2}'], stdin=p0.stdout, stdout=PIPE).communicate()[0].decode("Utf-8").split('\n')
            total = int(p1[0])//1024
            free = int(p1[1])//1024
            used = (total-free)
        else:
            raminfo = Popen(['free', '-m'], stdout=PIPE).communicate()[0].decode('Utf-8').split('\n')
            ram = ''.join(filter(re.compile('M').search, raminfo)).split()
            used = ram[2]
            total = ram[1]
        usedpercent = ((float(used) / float(total)) * 100)

        if usedpercent <= 33:
            ramdisplay = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], total)
        if usedpercent > 33 and usedpercent < 67:
            ramdisplay = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], total)
        if usedpercent >= 67:
            ramdisplay = '%s%s MB %s/ %s MB' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], total)
        self.key = 'RAM'
        self.value = ramdisplay

class Disk:
    def __init__(self):
        if dist == 'FreeBSD':
            p1 = Popen(['df', '-Tlhc'], stdout=PIPE).communicate()[0].decode("Utf-8")
            total = p1.splitlines()[-1]
            used = total.split()[2]
            size = total.split()[1]
            usedpercent = float(total.split()[4][:-1])
        elif dist == 'OpenBSD':
            p0 = Popen(['df', '-klP'], stdout=PIPE)
            p1 = Popen(['awk', 'BEGIN{s=0;u=0;} {s+=$2; u+=$3} END {print u, s}'], stdin=p0.stdout, stdout=PIPE).communicate()[0].decode("Utf-8").split()
            used = round(int(p1[0])/1024/1024, 2)
            size = round(int(p1[1])/1024/1024, 2)
            usedpercent = ((float(used) / float(size)) * 100)
            used = str(used) + ' GB'
            size = str(size) + ' GB'
        else:
            p1 = Popen(['df', '-Tlh', '--total', '-t', 'ext4', '-t', 'ext3', '-t', 'ext2', '-t', 'reiserfs', '-t', 'jfs', '-t', 'ntfs', '-t', 'fat32', '-t', 'btrfs', '-t', 'fuseblk', '-t', 'xfs'], stdout=PIPE).communicate()[0].decode("Utf-8")
            total = p1.splitlines()[-1]
            used = total.split()[3]
            size = total.split()[2]
            usedpercent = float(total.split()[5][:-1])
        if usedpercent <= 33:

            disk = '%s%s %s/ %s' % (colorDict['Sensors'][1], used, colorDict['Clear'][0], size)
        if usedpercent > 33 and usedpercent < 67:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][2], used, colorDict['Clear'][0], size)
        if usedpercent >= 67:
            disk = '%s%s %s/ %s' % (colorDict['Sensors'][0], used, colorDict['Clear'][0], size)
        self.key = 'Disk'
        self.value = disk

classes = {
 'User': User,
 'Hostname': Hostname,
 'OS': OS,
 'Kernel': Kernel,
 'Uptime': Uptime,
 'WindowManager': WindowManager,
 'DesktopEnvironment': DesktopEnvironment,
 'Shell': Shell,
 'Terminal': Terminal,
 'Packages': Packages,
 'CPU': CPU,
 'RAM': RAM,
 'Disk': Disk
 }

out = Output()
for x in output:
    out.append(classes[x]())
out.output()
